{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","Filter","value","onChange","PersonForm","onSubmit","nameValue","numberValue","nameOnChange","numberOnChange","type","Person","person","deletePerson","name","number","onClick","Notification","message","error","className","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","newFilter","setNewFilter","notification","setNotification","setError","useEffect","personService","initialPersons","personsToShow","filter","toLowerCase","includes","event","preventDefault","find","p","undefined","window","confirm","updatedPerson","returnedPerson","map","setTimeout","catch","e","concat","target","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.219e684c.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl).then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    return axios.post(baseUrl, newObject).then(response => response.data)\r\n}\r\n\r\nconst remove = id => {\r\n    return axios.delete(`${baseUrl}/${id}`).then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, newObject).then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, remove, update}","import React, {useState, useEffect} from 'react'\r\nimport personService from './services/persons'\r\n\r\nconst Filter = ({value, onChange}) => (\r\n    <div>\r\n        filter shown numbers with <input value={value} onChange={onChange}></input>\r\n    </div>\r\n)\r\n\r\nconst PersonForm = ({onSubmit, nameValue, numberValue, nameOnChange, numberOnChange}) => (\r\n    <form onSubmit={onSubmit}>\r\n        <div>\r\n            Name: <input value={nameValue} onChange={nameOnChange} />\r\n        </div>\r\n        <div>\r\n            Number: <input value={numberValue} onChange={numberOnChange} />\r\n        </div>\r\n        <div>\r\n            <button type=\"submit\">Add</button>\r\n        </div>\r\n    </form>\r\n)\r\n\r\nconst Person = ({person, deletePerson}) => (\r\n    <p>\r\n        <span>{person.name} {person.number} </span>\r\n        <button onClick={deletePerson}>Delete</button>\r\n    </p>\r\n)\r\n\r\nconst Notification = ({message, error}) => {\r\n    if (message === null && error === null) {\r\n        return null\r\n    } else if (error !== null) {\r\n        return (\r\n            <div className='error'>{error}</div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='notification'>{message}</div>\r\n    )\r\n} \r\n\r\nconst App = () => {\r\n    const [persons, setPersons] = useState([]) \r\n    const [newName, setNewName] = useState('')\r\n    const [newNumber, setNewNumber] = useState('')\r\n    const [newFilter, setNewFilter] = useState('')\r\n    const [notification, setNotification] = useState(null)\r\n    const [error, setError] = useState(null)\r\n\r\n    useEffect(() => {\r\n        personService\r\n            .getAll()\r\n            .then(initialPersons => {\r\n                setPersons(initialPersons)\r\n            })\r\n    }, [])\r\n\r\n    const addPerson = (event) => {\r\n        event.preventDefault()\r\n        const person = persons.find(p => p.name === newName)\r\n\r\n        if (person !== undefined) {\r\n            const confirmed = window.confirm(\r\n                `${newName} is already in the phonebook. Replace the old number with a new one?`\r\n            )\r\n\r\n            if (confirmed) {\r\n                const updatedPerson = {...person, number: newNumber}\r\n\r\n                personService\r\n                    .update(person.id, updatedPerson)\r\n                    .then(returnedPerson => {\r\n                        setPersons(persons.map(p => p.id !== person.id ? p : returnedPerson))\r\n                        setNotification(\r\n                            `Updated number of ${returnedPerson.name}`\r\n                        )\r\n                        setTimeout(() => {\r\n                            setNotification(null)\r\n                        }, 3000)\r\n                })\r\n                .catch(e => {\r\n                    setError(\r\n                        `Information of ${person.name} has already been deleted from server`\r\n                    )\r\n                    setTimeout(() => {\r\n                        setError(null)\r\n                    }, 3000)\r\n                    setPersons(persons.filter(p => p.id !== person.id))\r\n                })\r\n            }\r\n        } else {\r\n            const newPerson = {\r\n                name: newName,\r\n                number: newNumber\r\n            }\r\n            \r\n            personService\r\n                .create(newPerson)\r\n                .then(returnedPerson => {\r\n                    setPersons(persons.concat(returnedPerson))\r\n                    setNotification(\r\n                        `Added ${returnedPerson.name}`\r\n                    )\r\n                    setTimeout(() => {\r\n                        setNotification(null)\r\n                    }, 3000)\r\n                })\r\n        }\r\n\r\n        setNewName('')\r\n        setNewNumber('')\r\n    }\r\n\r\n    const deletePersonWithId = (id, name) => {\r\n        const confirmation = window.confirm(`Delete ${name} ?`)\r\n\r\n        if (confirmation) {\r\n            personService\r\n            .remove(id)\r\n            .then(() => {\r\n                setPersons(persons.filter(person => person.id !== id))\r\n                setNotification(\r\n                    `Deleted ${name}`\r\n                )\r\n                setTimeout(() => {\r\n                    setNotification(null)\r\n                }, 3000)\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleNameChange = (event) => {\r\n        setNewName(event.target.value)\r\n    }\r\n\r\n    const handleNumberChange = (event) => {\r\n        setNewNumber(event.target.value)\r\n    }\r\n\r\n    const handleFilterChange = (event) => {\r\n        setNewFilter(event.target.value)\r\n    }\r\n\r\n    const personsToShow = newFilter === ''\r\n        ? persons\r\n        : persons.filter(person => person.name.toLowerCase().includes(newFilter.toLowerCase()))\r\n\r\n    return (\r\n        <div>\r\n            <Notification message={notification} error={error} />\r\n            <h1>Phonebook</h1>\r\n            <h2>Add a number</h2>\r\n            <PersonForm \r\n                onSubmit={addPerson}\r\n                nameValue={newName} nameOnChange={handleNameChange}\r\n                numberValue={newNumber} numberOnChange={handleNumberChange} \r\n            />\r\n            <h2>Numbers</h2>\r\n            <Filter value={newFilter} onChange={handleFilterChange} />\r\n            {personsToShow.map(person =>\r\n                <Person \r\n                    key={person.name}\r\n                    person={person}\r\n                    deletePerson={() => deletePersonWithId(person.id, person.name)}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}